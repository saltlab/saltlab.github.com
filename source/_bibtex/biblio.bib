@INPROCEEDINGS{bozdag:wse2007,
  author = {Engin Bozdag and Ali Mesbah and van Deursen, Arie},
  title = {A Comparison of Push and Pull Techniques for Ajax},
  booktitle = {Proceedings of the International Symposium on Web Site Evolution (WSE)},
  year = {2007},
  pages = {15--22},
  publisher = {IEEE Computer Society},
}

@ARTICLE{bozdag:jwe,
  author = {Engin Bozdag and Ali Mesbah and van Deursen, Arie},
  title = {Performance Testing of Data Delivery Techniques for Ajax Applications},
  journal = {Journal of Web Engineering},
  year = {2009},
  volume	= {8},
  number	= {4},
  pages	= {287--315},
  url={http://swerl.tudelft.nl/twiki/pub/Main/TechnicalReports/TUD-SERG-2008-009.pdf}
}

@INPROCEEDINGS{gharavi:iwwost08,
  author = {Vahid Gharavi and Ali Mesbah and van Deursen, Arie},
  title = {Modelling and Generating Ajax Applications: A Model-Driven Approach},
  booktitle = {Proceedings of the 7th ICWE International Workshop on Web-Oriented
	Software Technologies (IWWOST'08)},
  year = {2008},
  pages = {38-43},  
}

@INPROCEEDINGS{mesbah:icse07,
  author = {Ali Mesbah},
  title = {Ajaxifying Classic Web Applications},
  booktitle = {Proceedings of the International Conference on Software Engineering, Doctoral Symposium (ICSE)},
  year = {2007},
  pages = {81--82},
  publisher = {IEEE Computer Society},
  url = {http://dx.doi.org/10.1109/ICSECOMPANION.2007.19},
}

@INPROCEEDINGS{mesbah:migrate07,
  author = {Ali Mesbah and van Deursen, Arie},
  title = {Migrating Multi-page Web Applications to Single-page Ajax Interfaces},
  booktitle = {Proceedings of the Conference on Software Maintenance and Reengineering (CSMR)},
  year = {2007},
  pages = {181--190},
  publisher = {IEEE Computer Society}
}

@INPROCEEDINGS{mesbah:wicsa07,
  author = {Ali Mesbah and van Deursen, Arie},
  title = {An Architectural Style for Ajax},
  booktitle = {Proceedings of the 6th Working Conference on Software Architecture
	(WICSA)},
  year = {2007},
  pages = {44--53},
  publisher = {IEEE Computer Society}
}

@INPROCEEDINGS{mesbah:ccc,
  author = {Ali Mesbah and van Deursen, Arie},
  title = {Crosscutting Concerns in J2EE Applications},
  booktitle = {Proceedings of the International Symposium on Web Site Evolution	(WSE)},
  year = {2005},
  pages = {14--21},
  publisher = {IEEE Computer Society},
  url = {http://dx.doi.org/10.1109/WSE.2005.4},
}

@INPROCEEDINGS{mesbah:icwe08,
  author = {Ali Mesbah and Engin Bozdag and van Deursen, Arie},
  title = {Crawling Ajax by Inferring User Interface State Changes},
  booktitle = {Proceedings of the International Conference on Web Engineering (ICWE)},
  year = {2008},
  pages = {122--134},
  publisher = {IEEE Computer Society},
  url = {http://www.ece.ubc.ca/~amesbah/docs/icwe08.pdf}
}

@INPROCEEDINGS{mesbah:icse09,
  author = {Ali Mesbah and Arie van Deursen},
  title = {Invariant-Based Automatic Testing of Ajax User Interfaces},
  booktitle = {Proceedings of the 31st ACM/IEEE International Conference on Software Engineering (ICSE)},
  year = {2009},
  pages = {210--220},
  publisher = {IEEE Computer Society},
  url = {http://www.ece.ubc.ca/~amesbah/docs/icse09.pdf},
  note = {[Acceptance rate 12\%]},
  award= {[ACM SIGSOFT Distinguished Paper Award]}
}

@ARTICLE{mesbah:jss08,
  author = {Ali Mesbah and van Deursen, Arie},
  title = {A Component- and Push-based Architectural Style for Ajax Applications},
  journal = {Journal of Systems and Software (JSS)},
  year = {2008},
  volume = {81},
  pages = {2194--2209},
  number = {12},
  url = {http://salt.ece.ubc.ca/publications/docs/jss08.pdf}
}

@INPROCEEDINGS{bezemer:esec09,
  author = {Cor-Paul Bezemer and Ali Mesbah and van Deursen, Arie},
  title = {Automated Security Testing of Web Widget Interactions},
  booktitle = {Proceedings of the joint meeting of the European Software Engineering Conference and the ACM SIGSOFT symposium on the Foundations of Software Engineering (ESEC-FSE)},
  year = {2009},
  pages = {81--91},
  publisher = {ACM},
  url = {http://www.ece.ubc.ca/~amesbah/docs/fse09.pdf},
  note = {[Acceptance rate 14.7%]}
}

@INPROCEEDINGS{deursen:sofsem,
  author = {van Deursen, Arie and Ali Mesbah},
  title = {Research Issues in the Automated Testing
of Ajax Applications},
  booktitle = {Proceedings of the 36th International Conference on Current Trends in Theory and Practice of Computer Science (SOFSEM)},
  year = {2010},
  pages = {16--28},
  publisher = {Lecture Notes in Computer Science 5901, Springer-Verlag},
}

@InProceedings{Roest:2010.icst,
  author = 	 {Danny Roest and Ali Mesbah and van Deursen, Arie},
  title = 	 {Regression Testing Ajax Applications: Coping with Dynamism},
  booktitle = {Proceedings of the International Conference on Software Testing, Verification, and Validation (ICST)},
  year = 	 {2010},
  publisher = {IEEE Computer Society},
  pages = {128--136},
}

@ARTICLE{mesbah:tse12,
  author = {Ali Mesbah and van Deursen, Arie and Danny Roest},
  title = {Invariant-based Automatic Testing of Modern Web Applications},
  journal = {IEEE Transactions on Software Engineering (TSE)},
  year = {2012},
  volume={38}, 
  number={1}, 
  pages={35--53},
  url = {http://www.ece.ubc.ca/~amesbah/docs/tse11.pdf}
}

@inproceedings{VanDeursen:2010.nier,
	author	= {van Deursen, Arie and Ali Mesbah and Bas Cornelissen and Andy Zaidman and Martin Pinzger and Anja Guzzi},
	title	= {Adinda: A knowledgeable, Browser-Based IDE},
	booktitle	= {Proceedings of the International Conference on Software Engineering, New Ideas and Emerging Results Track (ICSE NIER)},
	publisher	= {ACM},
	year	= {2010},
	pages	= {203--206},
}

@inproceedings{mesbah:icse11,
	author = {Mesbah, Ali and Mukul R. Prasad},
	title = {Automated Cross-Browser Compatibility Testing},
	booktitle = {Proceedings of the ACM/IEEE International Conference on Software Engineering (ICSE)},
	year = {2011},
	pages = {561--570},
	publisher = {ACM},
	url = {http://www.ece.ubc.ca/~amesbah/docs/icse11.pdf},
	note = {[Acceptance rate 14%]}
}

@ARTICLE{mesbah:tweb12,
  author = {Ali Mesbah and van Deursen, Arie and Stefan Lenselink},
  title = {Crawling Ajax-based Web Applications through Dynamic Analysis of User Interface State Changes},
  journal = {ACM Transactions on the Web (TWEB)},
  year = {2012},
  volume = {6},
  number = {1},
  pages = {3:1--3:30},
  url = {http://www.ece.ubc.ca/~amesbah/docs/tweb-final.pdf}
}

@inproceedings{ocariza:icst12,
  title={AutoFLox: An Automatic Fault Localizer for Client-Side JavaScript},
  author={Frolin Jr Ocariza and Pattabiraman, Karthik and Mesbah, Ali},
  booktitle = {Proceedings of the International Conference on Software Testing, Verification and Validation (ICST)},
  year = {2012},
  pages = {31--40},
  publisher = {IEEE Computer Society},
  url = {http://www.ece.ubc.ca/~amesbah/docs/icst12.pdf}
}

@inproceedings{mesbah:icse2012,
	author = {Ali Mesbah and Shabnam Mirshokraie},
	title = {Automated Analysis of CSS Rules to Support Style Maintenance},
	booktitle = {Proceedings of the ACM/IEEE International Conference on Software Engineering (ICSE)},
	year = {2012},
  pages = {408--418},
	publisher = {IEEE Computer Society},
	url = {http://www.ece.ubc.ca/~amesbah/docs/icse12.pdf}
}

@inproceedings{shabnam:icwe12,
	author = {Shabnam Mirshokraie and Ali Mesbah},
	title = {JSART: JavaScript Assertion-based Regression Testing},
	booktitle = {Proceedings of the International Conference on Web Engineering (ICWE)},
	year = {2012}, 
  pages = {238--252},
	publisher = {Springer},
	url = {http://www.ece.ubc.ca/~amesbah/docs/icwe12.pdf},
  note = {[Acceptance rate 20%]}
}

@inproceedings{mona:wcre12,
	author = {Erfani Joorabchi, Mona and Ali Mesbah},
	title = {Reverse Engineering iOS Mobile Applications},
	booktitle = {Proceedings of the Working Conference on Reverse Engineering (WCRE)},
	year = {2012}, 
	publisher = {IEEE Computer Society},
	pages = {177--186},
	url = {http://ece.ubc.ca/~amesbah/docs/wcre12.pdf}
}



@ARTICLE{garousi:ist13,
  author = {Vahid Garousi and Ali Mesbah and Betin Can, A. and Shabnam Mirshokraie},
  title = {A Systematic Mapping Study of Web Application Testing},
  journal   = {Information and Software Technology},
  volume    = {55},
  number    = {8},
  year      = {2013},
  pages     = {1374--1396},
  url = {http://www.ece.ubc.ca/~amesbah/docs/ist13.pdf},
}


@inproceedings{shabnam:mutandis,
	author = {Shabnam Mirshokraie and Ali Mesbah and Karthik Pattabiraman},
	title = {Efficient JavaScript Mutation Testing},
	booktitle = {Proceedings of the International Conference on Software Testing, Verification and Validation (ICST)}, 
	publisher = {IEEE Computer Society},
	year = {2013},
	pages = {74--83},
	url = {http://ece.ubc.ca/~amesbah/docs/icst13.pdf},
       note = {[Acceptance rate 25%]},
       award = {[Best Paper Runner-up Award]}
}

@inproceedings{jana:icwe13,
	author = {Zahra Behfarshad and Ali Mesbah},
	title = {Hidden-Web Induced by Client-Side Scripting: An Empirical Study},
  booktitle = {Proceedings of the International Conference on Web Engineering (ICWE)},
  year = {2013}, 
  series    = {Lecture Notes in Computer Science},
  volume    = {7977},
  publisher = {Springer},
  pages     = {52--67},
  url = {http://www.ece.ubc.ca/~amesbah/docs/icwe13.pdf},
  award = {[Best Paper Award]},
  abstract = {Client-side JavaScript is increasingly used for enhancing web application functionality, interactivity, and responsiveness. Through the execution of JavaScript code in browsers, the DOM tree representing a webpage at runtime, can be incrementally updated without requiring a URL change. This dynamically updated content is hidden from general search engines. In this paper, we present the first empirical study on measuring and characterizing the hidden-web induced as a result of client-side JavaScript execution. Our study reveals that this type of hidden-web content is prevalent in online web applications today: from the 500 websites we analyzed, 95\% contain client-side hidden-web content; On those websites that contain client-side hidden-web content, (1) on average, 62\% of the web states are hidden, (2) per hidden state, there is an average of 19 kilobytes of data that is hidden from which 0.6 kilobytes contain textual content, (3) the DIV element is the most common clickable element used (61\%) to initiate this type of hidden-web state transition, and (4) on average 25 minutes is required to dynamically crawl 50 DOM states. Further, our study indicates that there is a correlation between DOM tree size and hidden-web content, but no correlation exists between the amount of JavaScript code and client-side hidden-web.}
}


@inproceedings{james:imagen,
        author = {James Lo and Eric Wohlstadter and Ali Mesbah},
        title = {Imagen: Runtime Migration of Browser Sessions for JavaScript Web Applications},
        booktitle = {Proceedings of the International World Wide Web Conference (WWW)},
        publisher = {ACM},
        pages = {815--825},
        year = {2013},
        url = {http://ece.ubc.ca/~amesbah/docs/www13.pdf},
        note = {[Acceptance rate 15%]}
}

@inproceedings{mona:esem13,
	author = {Erfani Joorabchi, Mona and Ali Mesbah and Philippe Kruchten},
	title = {Real Challenges in Mobile App Development},
	booktitle = {Proceedings of the ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
	year = {2013}, 
	publisher = {IEEE Computer Society},
	pages = {15--24},
	url = {http://www.ece.ubc.ca/~amesbah/docs/mona-esem13.pdf},
	abstract = {Context: Mobile app development is a relatively new phenomenon that is increasing rapidly due to the ubiquity and popularity of smartphones among end-users. Objective: The goal of our study is to gain an understanding of the main challenges developers face in practice when they build apps for different mobile devices. Method: We conducted a qualitative study, following a Grounded Theory approach, in which we interviewed 12
senior mobile developers from 9 different companies, followed by a semi-structured survey, with 188 respondents from the mobile development community. Results: The outcome is an overview of the current challenges faced by mobile developers in practice, such as developing apps across multiple platforms, lack of robust monitoring, analysis, and testing tools, and emulators that are slow or miss many features of mobile devices. Conclusion: Based
on our findings of the current practices and challenges, we highlight areas that require more attention from the research and development community.}
}

@inproceedings{frolin:jsbugs,
        author = {Frolin Ocariza and Kartik Bajaj and Karthik Pattabiraman and Ali Mesbah},
        title = {An Empirical Study of Client-Side JavaScript Bugs},
        booktitle = {Proceedings of the ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
        publisher = {IEEE Computer Society},
        pages = {55--64},
        year = {2013},
        url = {http://www.ece.ubc.ca/~amesbah/docs/frolin-esem13.pdf},
        abstract = {Context: Client-side JavaScript is widely used in web applications to improve user-interactivity and minimize client-server communications. Unfortunately, web applications are prone to JavaScript faults. While prior studies have demonstrated the prevalence of these faults, no attempts have been made to determine their root causes and consequences. Objective: The goal of our study is to understand the root causes and impact of JavaScript faults and how the results can impact JavaScript programmers, testers and tool developers. Method: We perform an empirical study of 317 bug reports from 12 bug repositories. The bug reports are thoroughly examined to classify and extract information about the fault's cause (the error) and consequence (the failure and impact). Result: The majority (65\%) of JavaScript faults are DOM-related, meaning they are caused by faulty interactions of the JavaScript
code with the Document Object Model (DOM). Further, 80\% of
the highest impact JavaScript faults are DOM-related. Finally, most JavaScript faults originate from programmer mistakes committed in the JavaScript code itself, as opposed to other web application components such as the server-side or HTML code. Conclusion: Given the prevalence of DOM-related faults, JavaScript programmers need development tools that can help them reason about the DOM. Also, testers should prioritize detection of DOM-related faults as most high impact faults belong to this category. Finally, developers can use the error patterns we found to design more powerful static analysis tools for JavaScript.}
}

@inproceedings{amin:scam13,
        author = {Milani Fard, Amin and Ali Mesbah},
        title = {JSNose: Detecting JavaScript Code Smells},
        booktitle = {Proceedings of the International Conference on Source Code Analysis and Manipulation (SCAM)},
        publisher = {IEEE Computer Society},
        pages={116--125}, 
        year = {2013},
        url = {http://www.ece.ubc.ca/~amesbah/docs/scam13.pdf},
        abstract = {JavaScript is a powerful and flexible prototype-based scripting language that is increasingly used by developers to create interactive web applications. The language is interpreted, dynamic, weakly-typed, and has first-class functions. In addition, it interacts with other web languages such as CSS and HTML at runtime. All these characteristics make JavaScript code particularly error-prone and challenging to write and maintain. Code smells are patterns in the source code that can adversely influence program comprehension and maintainability of the program in the long term. We propose a set of 13 JavaScript code smells, collected from various developer resources. We present a JavaScript code smell detection technique called JSNose. Our metric-based approach combines static and dynamic analysis to detect smells in client-side code. This automated technique can help developers to spot code that could benefit from refactoring. We evaluate the smell finding capabilities of our technique through an empirical study. By analyzing 11 web applications, we investigate which smells detected by JSNose are more prevalent.}
}

@inproceedings{shabnam:ase13,
	author = {Shabnam Mirshokraie and Ali Mesbah and Karthik Pattabiraman},
	title = {Pythia: Generating Test Cases with Oracles for JavaScript Applications},
	booktitle = {Proceedings of the ACM/IEEE International Conference on Automated Software Engineering (ASE), New Ideas Track}, 
	publisher = {IEEE Computer Society},
	year = {2013},
	pages = {610--615},
	 url = {http://salt.ece.ubc.ca/publications/docs/ase13.pdf}
}

@inproceedings{amin:issre13,
        author = {Milani Fard, Amin and Ali Mesbah},
        title = {Feedback-directed Exploration of Web Applications to Derive Test Models},
        booktitle = {Proceedings of the International Symposium on Software Reliability Engineering (ISSRE)},
        publisher = {IEEE Computer Society},
        pages = {278--287},
        year = {2013},
        url = {http://www.ece.ubc.ca/~amesbah/docs/issre13.pdf},
        abstract = {Dynamic exploration techniques play a significant role in automated web application testing and analysis. However,
a general web application crawler that exhaustively explores
the states can become mired in limited specific regions of
the web application, yielding poor functionality coverage. In
this paper, we propose a feedback-directed web application
exploration technique to derive test models. While exploring,
our approach dynamically measures and applies a combination
of code coverage impact, navigational diversity, and structural
diversity, to decide a-priori (1) which state should be expanded,
and (2) which event should be exercised next to maximize the
overall coverage, while minimizing the size of the test model.
Our approach is implemented in a tool called FeedEx. We
have empirically evaluated the efficacy of FeedEx using six web
applications. The results show that our technique is successful in
yielding higher coverage while reducing the size of the test model,
compared to classical exhaustive techniques such as depth-first,
breadth-first, and random exploration.}
}


@inproceedings{kartik:msr14,
        author = {Kartik Bajaj and Karthik Pattabiraman and Ali Mesbah},
        title = {Mining Questions Asked by Web Developers},
        booktitle = {Proceedings of the Working Conference on Mining Software Repositories (MSR)},
        publisher = {ACM},
        pages = {10 pages},
        year = {2014},
    	url = {http://salt.ece.ubc.ca/publications/docs/kartik-msr14.pdf},
    abstract = {Modern web applications consist of a significant amount of client-side code, written in JavaScript, HTML, and CSS. In this paper, we present a study of common challenges and misconceptions among web developers, by mining related questions asked on Stack Overflow. We use unsupervised learning to categorize the mined questions and define a ranking algorithm to rank all the Stack Overflow questions based on their importance. We analyze the top 50 questions qualitatively. The results indicate that (1) the overall share of web development related discussions is increasing among developers, (2) browser related discussions are prevalent; however, this share is decreasing with time, (3) form validation and other DOM related discussions have been discussed consistently over time, (4) web related discussions are becoming more prevalent in mobile development, and (5) developers face implementation issues with new HTML5 features such as Canvas. We examine the implications of the results on the development, research, and standardization communities.}        
}

@inproceedings{mona:msr14,
	author = {Erfani Joorabchi, Mona and Mehdi Mirzaaghaei and Ali Mesbah},
	title = {Works For Me! {C}haracterizing Non-Reproducible Bug Reports},
    booktitle = {Proceedings of the Working Conference on Mining Software Repositories (MSR)}, 
	publisher = {ACM},
	pages = {10 pages},
    year = {2014},
    url = {http://salt.ece.ubc.ca/publications/docs/mona-msr14.pdf},    
    abstract = {Bug repository systems have become an integral component of software development activities. Ideally, each bug report should help developers to find and fix a software fault. However, there is a subset of reported bugs that is not (easily) reproducible, on which developers spend considerable amounts of time and effort. We present an empirical analysis of non- reproducible bug reports to characterize their rate, nature, and root causes. We mine one industrial and five open-source bug repositories, resulting in 32K non-reproducible bug reports. We (1) compare properties of non-reproducible reports with their counterparts such as active time and number of authors, (2) investigate their life-cycle patterns, and (3) examine 120 Fixed non-reproducible reports. In addition, we qualitatively classify a set of randomly selected non-reproducible bug reports (1,643) into six common categories. Our results show that, on average, non-reproducible bug reports pertain to 17\% of all bug reports, remain active three months longer than their counterparts, can be mainly (45\%) classified as "Interbug Dependencies", and 66\% of Fixed non-reproducible reports were indeed reproduced and fixed.}
}

@inproceedings{icse14seip,
	author = {Alex Nederlof and Ali Mesbah and van Deursen, Arie},
	title = {Software Engineering for the Web: The State of the Practice},
        booktitle = {Proceedings of the ACM/IEEE International Conference on Software Engineering, Software Engineering In Practice (ICSE SEIP)},
        publisher = {ACM},
        pages = {10 pages},
        year = {2014},
        url = {http://salt.ece.ubc.ca/publications/docs/icse14-seip.pdf},
        abstract = {Today's web applications increasingly rely on client-side code execution. HTML is not just created on the server, but manipulated extensively within the browser through JavaScript code. In this paper, we seek to understand the software engineering implications of this. We look at deviations from many known best practices in such areas of performance, accessibility, and correct structuring of HTML documents. Furthermore, we assess to what extent such deviations manifest themselves through client-side code manipulation only. To answer these questions, we conducted a large scale experiment, involving automated client-enabled crawling of over 4000 web applications, resulting in over 100,000,000 pages analyzed, and close to 1,000,000 unique client-side user interface states. Our findings show that the majority of sites contain a substantial number of problems, making sites unnecessarily slow, inaccessible for the visually impaired, and with layout that is unpredictable due to errors in the dynamically modified DOM trees.}
}


@inproceedings{frolin:vejovis,
        author = {Frolin Ocariza and Karthik Pattabiraman and Ali Mesbah},
        title = {Vejovis: Suggesting Fixes for JavaScript Faults},
        booktitle = {Proceedings of the ACM/IEEE International Conference on Software Engineering (ICSE)},
        publisher = {ACM},
        pages = {11 pages},
        year = {2014},
        url = {http://salt.ece.ubc.ca/publications/docs/vejovis-icse14.pdf},
        abstract = {JavaScript is used in web applications for achieving rich user interfaces and implementing core functionality. Unfortunately, JavaScript code is known to be prone to faults. In an earlier study, we found that over 65\% of such faults are caused by the interaction of JavaScript code with the DOM at runtime (DOM-related faults). In this paper, we first perform an analysis of 190 bug reports to understand fixes commonly applied by programmers to these DOM- related faults; we observe that parameter replacements and DOM element validations are common fix categories. Based on these findings, we propose an automated technique and tool, called Vejovis, for suggesting repairs for DOM-based JavaScript faults. To evaluate Vejovis, we conduct a case study in which we subject Vejovis to 22 real-world bugs across 11 applications. We find that Vejovis accurately suggests repairs for 20 out of the 22 bugs, and in 13 of the 20 cases, the correct fix was the top ranked one.}
}

@inproceedings{saba:clematis,
        author = {Saba Alimadadi and Sheldon Sequeira and Ali Mesbah and Karthik Pattabiraman},
        title = {Understanding JavaScript Event-based Interactions},
        booktitle = {Proceedings of the ACM/IEEE International Conference on Software Engineering (ICSE)},
        publisher = {ACM},
        pages = {11 pages},
        url = {http://salt.ece.ubc.ca/publications/docs/clematis-icse14.pdf},
        report = {http://salt.ece.ubc.ca/publications/docs/UBC-SALT-2014-001.pdf},
        year = {2014},
        abstract = {Web applications have become one of the fastest growing types of software systems today. Despite their popularity, understanding the behaviour of modern web applications is still a challenging endeavour for developers during development and maintenance tasks. The challenges mainly stem from the dynamic, event-driven, and asynchronous nature of the JavaScript language. We propose a generic technique for capturing low-level event-based interactions in a web application and mapping those to a higher-level behavioural model. This model is then transformed into an interactive visualization, representing episodes of triggered causal and temporal events, related JavaScript code executions, and their impact on the dynamic DOM state. Our approach, implemented in a tool called Clematis, allows developers to easily understand the complex dynamic behaviour of their application at three different semantic levels of granularity. The results of our industrial controlled experiment show that Clematis is capable of improving the task accuracy by 61\%, while reducing the task completion time by 47\%.}
}




