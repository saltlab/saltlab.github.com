@INPROCEEDINGS{bozdag:wse2007,
  author = {Engin Bozdag and Ali Mesbah and van Deursen, Arie},
  title = {A Comparison of Push and Pull Techniques for Ajax},
  booktitle = {Proceedings of the 9th IEEE International Symposium on Web Site Evolution (WSE)},
  year = {2007},
  pages = {15--22},
  publisher = {IEEE Computer Society},
}

@ARTICLE{bozdag:jwe,
  author = {Engin Bozdag and Ali Mesbah and van Deursen, Arie},
  title = {Performance Testing of Data Delivery Techniques for Ajax Applications},
  journal = {Journal of Web Engineering},
  year = {2009},
  volume	= {8},
  number	= {4},
  pages	= {287--315},
  url={http://swerl.tudelft.nl/twiki/pub/Main/TechnicalReports/TUD-SERG-2008-009.pdf}
}

@INPROCEEDINGS{gharavi:iwwost08,
  author = {Vahid Gharavi and Ali Mesbah and van Deursen, Arie},
  title = {Modelling and Generating Ajax Applications: A Model-Driven Approach},
  booktitle = {Proceedings of the 7th ICWE International Workshop on Web-Oriented
	Software Technologies (IWWOST'08)},
  year = {2008},
  pages = {38-43},  
}

@INPROCEEDINGS{mesbah:icse07,
  author = {Ali Mesbah},
  title = {Ajaxifying Classic Web Applications},
  booktitle = {Proceedings of the 29th International Conference on Software Engineering, Doctoral Symposium (ICSE)},
  year = {2007},
  pages = {81--82},
  publisher = {IEEE Computer Society},
  url = {http://dx.doi.org/10.1109/ICSECOMPANION.2007.19},
}

@INPROCEEDINGS{mesbah:migrate07,
  author = {Ali Mesbah and van Deursen, Arie},
  title = {Migrating Multi-page Web Applications to Single-page Ajax Interfaces},
  booktitle = {Proceedings of the 11th Conference on Software Maintenance and Reengineering (CSMR)},
  year = {2007},
  pages = {181--190},
  publisher = {IEEE Computer Society}
}

@INPROCEEDINGS{mesbah:wicsa07,
  author = {Ali Mesbah and van Deursen, Arie},
  title = {An Architectural Style for Ajax},
  booktitle = {Proceedings of the 6th Working IEEE/IFIP Conference on Software Architecture
	(WICSA)},
  year = {2007},
  pages = {44--53},
  publisher = {IEEE Computer Society}
}

@INPROCEEDINGS{mesbah:ccc,
  author = {Ali Mesbah and van Deursen, Arie},
  title = {Crosscutting Concerns in J2EE Applications},
  booktitle = {Proceedings of the 7th International Symposium on Web Site Evolution	(WSE)},
  year = {2005},
  pages = {14--21},
  publisher = {IEEE Computer Society},
  url = {http://dx.doi.org/10.1109/WSE.2005.4},
}

@INPROCEEDINGS{mesbah:icwe08,
  author = {Ali Mesbah and Engin Bozdag and van Deursen, Arie},
  title = {Crawling Ajax by Inferring User Interface State Changes},
  booktitle = {Proceedings of the 8th International Conference on Web Engineering (ICWE)},
  year = {2008},
  pages = {122--134},
  publisher = {IEEE Computer Society},
  url = {http://www.ece.ubc.ca/~amesbah/docs/icwe08.pdf}
}

@INPROCEEDINGS{mesbah:icse09,
  author = {Ali Mesbah and Arie van Deursen},
  title = {Invariant-Based Automatic Testing of Ajax User Interfaces},
  booktitle = {Proceedings of the 31st ACM/IEEE International Conference on Software Engineering (ICSE)},
  year = {2009},
  pages = {210--220},
  publisher = {IEEE Computer Society},
  url = {http://www.ece.ubc.ca/~amesbah/docs/icse09.pdf},
  note = {[Acceptance rate 12\%]},
  award= {[ACM SIGSOFT Distinguished Paper Award]}
}

@ARTICLE{mesbah:jss08,
  author = {Ali Mesbah and van Deursen, Arie},
  title = {A Component- and Push-based Architectural Style for Ajax Applications},
  journal = {Journal of Systems and Software (JSS)},
  year = {2008},
  volume = {81},
  pages = {2194--2209},
  number = {12}
}

@INPROCEEDINGS{bezemer:esec09,
  author = {Cor-Paul Bezemer and Ali Mesbah and van Deursen, Arie},
  title = {Automated Security Testing of Web Widget Interactions},
  booktitle = {Proceedings of the 7th joint meeting of the European Software Engineering Conference and the ACM SIGSOFT symposium on the Foundations of Software Engineering (ESEC-FSE)},
  year = {2009},
  pages = {81--91},
  publisher = {ACM},
  url = {http://www.ece.ubc.ca/~amesbah/docs/fse09.pdf},
  note = {[Acceptance rate 14.7%]}
}

@phdthesis{mesbah:phd,
	author	= {Ali Mesbah},
	title	= {Analysis and Testing of Ajax-based Single-Page Web Applications},
	school	= {Delft University of Technology},
	year	= {2009},
	tutor	= {Arie van Deursen},
	isbn	= {978-90-79982-02-8},
	url	= {http://www.st.ewi.tudelft.nl/%7Emesbah/docs/mesbah-dissertation.pdf},
}

@INPROCEEDINGS{deursen:sofsem,
  author = {van Deursen, Arie and Ali Mesbah},
  title = {Research Issues in the Automated Testing
of Ajax Applications},
  booktitle = {Proceedings of the 36th International Conference on Current Trends in Theory and Practice of Computer Science (SOFSEM)},
  year = {2010},
  pages = {16--28},
  publisher = {Lecture Notes in Computer Science 5901, Springer-Verlag},
}

@InProceedings{Roest:2010.icst,
  author = 	 {Danny Roest and Ali Mesbah and van Deursen, Arie},
  title = 	 {Regression Testing Ajax Applications: Coping with Dynamism},
  booktitle = {Proceedings of the International Conference on Software Testing, Verification, and Validation (ICST)},
  year = 	 {2010},
  publisher = {IEEE Computer Society},
  pages = {128--136},
}

@ARTICLE{mesbah:tse12,
  author = {Ali Mesbah and van Deursen, Arie and Danny Roest},
  title = {Invariant-based Automatic Testing of Modern Web Applications},
  journal = {IEEE Transactions on Software Engineering (TSE)},
  year = {2012},
  volume={38}, 
  number={1}, 
  pages={35--53},
  url = {http://www.ece.ubc.ca/~amesbah/docs/tse11.pdf}
}

@inproceedings{VanDeursen:2010.nier,
	author	= {van Deursen, Arie and Ali Mesbah and Bas Cornelissen and Andy Zaidman and Martin Pinzger and Anja Guzzi},
	title	= {Adinda: A knowledgeable, Browser-Based IDE},
	booktitle	= {Companion Proceedings of the 32nd International Conference on Software Engineering, New Ideas and Emerging Results Track (ICSE NIER)},
	publisher	= {ACM},
	year	= {2010},
	pages	= {203--206},
}

@inproceedings{mesbah:icse11,
	author = {Mesbah, Ali and Mukul R. Prasad},
	title = {Automated Cross-Browser Compatibility Testing},
	booktitle = {Proceedings of the ACM/IEEE International Conference on Software Engineering (ICSE)},
	year = {2011},
	pages = {561--570},
	publisher = {ACM},
	url = {http://www.ece.ubc.ca/~amesbah/docs/icse11.pdf},
	note = {[Acceptance rate 14%]}
}

@ARTICLE{mesbah:tweb12,
  author = {Ali Mesbah and van Deursen, Arie and Stefan Lenselink},
  title = {Crawling Ajax-based Web Applications through Dynamic Analysis of User Interface State Changes},
  journal = {ACM Transactions on the Web (TWEB)},
  year = {2012},
  volume = {6},
  number = {1},
  pages = {3:1--3:30},
  url = {http://www.ece.ubc.ca/~amesbah/docs/tweb-final.pdf}
}

@inproceedings{ocariza:icst12,
  title={AutoFLox: An Automatic Fault Localizer for Client-Side JavaScript},
  author={Frolin Jr Ocariza and Pattabiraman, Karthik and Mesbah, Ali},
  booktitle = {Proceedings of the IEEE International Conference on Software Testing, Verification and Validation (ICST)},
  year = {2012},
  pages = {31--40},
  publisher = {IEEE Computer Society},
  url = {http://www.ece.ubc.ca/~amesbah/docs/icst12.pdf}
}

@inproceedings{mesbah:icse2012,
	author = {Ali Mesbah and Shabnam Mirshokraie},
	title = {Automated Analysis of CSS Rules to Support Style Maintenance},
	booktitle = {Proceedings of the ACM/IEEE International Conference on Software Engineering (ICSE)},
	year = {2012},
  pages = {408--418},
	publisher = {IEEE Computer Society},
	url = {http://www.ece.ubc.ca/~amesbah/docs/icse12.pdf}
}

@inproceedings{shabnam:icwe12,
	author = {Shabnam Mirshokraie and Ali Mesbah},
	title = {JSART: JavaScript Assertion-based Regression Testing},
	booktitle = {Proceedings of the 12th International Conference on Web Engineering (ICWE)},
	year = {2012}, 
  pages = {238--252},
	publisher = {Springer},
	url = {http://www.ece.ubc.ca/~amesbah/docs/icwe12.pdf},
  note = {[Acceptance rate 20%]}
}

@inproceedings{mona:wcre12,
	author = {Erfani Joorabchi, Mona and Ali Mesbah},
	title = {Reverse Engineering iOS Mobile Applications},
	booktitle = {Proceedings of the 19th Working Conference on Reverse Engineering (WCRE)},
	year = {2012}, 
	publisher = {IEEE Computer Society},
	pages = {177--186},
	url = {http://ece.ubc.ca/~amesbah/docs/wcre12.pdf}
}



@ARTICLE{garousi:ist13,
  author = {Vahid Garousi and Ali Mesbah and Betin Can, A. and Shabnam Mirshokraie},
  title = {A Systematic Mapping Study of Web Application Testing},
  journal   = {Information and Software Technology},
  volume    = {55},
  number    = {8},
  year      = {2013},
  pages     = {1374--1396},
  url = {http://www.ece.ubc.ca/~amesbah/docs/ist13.pdf},
}


@inproceedings{shabnam:mutandis,
	author = {Shabnam Mirshokraie and Ali Mesbah and Karthik Pattabiraman},
	title = {Efficient JavaScript Mutation Testing},
	booktitle = {Proceedings of the International Conference on Software Testing, Verification and Validation (ICST)}, 
	publisher = {IEEE Computer Society},
	year = {2013},
	pages = {74--83},
	url = {http://ece.ubc.ca/~amesbah/docs/icst13.pdf},
       note = {[Acceptance rate 25%]},
       award = {[Best Paper Runner-up Award]}
}

@inproceedings{jana:icwe13,
	author = {Zahra Behfarshad and Ali Mesbah},
	title = {Hidden-Web Induced by Client-Side Scripting: An Empirical Study},
  booktitle = {Proceedings of the International Conference on Web Engineering (ICWE)},
  year = {2013}, 
  series    = {Lecture Notes in Computer Science},
  volume    = {7977},
  publisher = {Springer},
  pages     = {52--67},
  url = {http://www.ece.ubc.ca/~amesbah/docs/icwe13.pdf},
  award = {[Best Paper Award]},
  abstract = {Client-side JavaScript is increasingly used for enhancing web application functionality, interactivity, and responsiveness. Through the execution of JavaScript code in browsers, the DOM tree representing a webpage at runtime, can be incrementally updated without requiring a URL change. This dynamically updated content is hidden from general search engines. In this paper, we present the first empirical study on measuring and characterizing the hidden-web induced as a result of client-side JavaScript execution. Our study reveals that this type of hidden-web content is prevalent in online web applications today: from the 500 websites we analyzed, 95\% contain client-side hidden-web content; On those websites that contain client-side hidden-web content, (1) on average, 62\% of the web states are hidden, (2) per hidden state, there is an average of 19 kilobytes of data that is hidden from which 0.6 kilobytes contain textual content, (3) the DIV element is the most common clickable element used (61\%) to initiate this type of hidden-web state transition, and (4) on average 25 minutes is required to dynamically crawl 50 DOM states. Further, our study indicates that there is a correlation between DOM tree size and hidden-web content, but no correlation exists between the amount of JavaScript code and client-side hidden-web.}
}


@inproceedings{james:imagen,
        author = {James Lo and Eric Wohlstadter and Ali Mesbah},
        title = {Imagen: Runtime Migration of Browser Sessions for JavaScript Web Applications},
        booktitle = {Proceedings of the International World Wide Web Conference (WWW)},
        publisher = {ACM},
        pages = {815--825},
        year = {2013},
        url = {http://ece.ubc.ca/~amesbah/docs/www13.pdf},
        note = {[Acceptance rate 15%]}
}

@inproceedings{james:imagendemo,
        author = {James Lo and Eric Wohlstadter and Ali Mesbah},
        title = {Live Migration of JavaScript Web Apps},
        booktitle = {Proceedings of the International World Wide Web Conference, Demo Track (WWW)},
        publisher = {ACM},
        pages = {4 pages},
        year = {2013},
}

@inproceedings{mona:esem13,
	author = {Erfani Joorabchi, Mona and Ali Mesbah and Philippe Kruchten},
	title = {Real Challenges in Mobile App Development},
	booktitle = {Proceedings of the ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
	year = {2013}, 
	publisher = {IEEE Computer Society},
	pages = {10 pages},
	url = {http://www.ece.ubc.ca/~amesbah/docs/mona-esem13.pdf},
	abstract = {Context: Mobile app development is a relatively new phenomenon that is increasing rapidly due to the ubiquity and popularity of smartphones among end-users. Objective: The goal of our study is to gain an understanding of the main challenges developers face in practice when they build apps for different mobile devices. Method: We conducted a qualitative study, following a Grounded Theory approach, in which we interviewed 12
senior mobile developers from 9 different companies, followed by a semi-structured survey, with 188 respondents from the mobile development community. Results: The outcome is an overview of the current challenges faced by mobile developers in practice, such as developing apps across multiple platforms, lack of robust monitoring, analysis, and testing tools, and emulators that are slow or miss many features of mobile devices. Conclusion: Based
on our findings of the current practices and challenges, we highlight areas that require more attention from the research and development community.}
}

@inproceedings{frolin:jsbugs,
        author = {Frolin Ocariza and Kartik Bajaj and Karthik Pattabiraman and Ali Mesbah},
        title = {An Empirical Study of Client-Side JavaScript Bugs},
        booktitle = {Proceedings of the ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
        publisher = {IEEE Computer Society},
        pages = {10 pages},
        year = {2013},
        url = {http://www.ece.ubc.ca/~amesbah/docs/frolin-esem13.pdf},
        abstract = {Context: Client-side JavaScript is widely used in web applications to improve user-interactivity and minimize client-server communications. Unfortunately, web applications are prone to JavaScript faults. While prior studies have demonstrated the prevalence of these faults, no attempts have been made to determine their root causes and consequences. Objective: The goal of our study is to understand the root causes and impact of JavaScript faults and how the results can impact JavaScript programmers, testers and tool developers. Method: We perform an empirical study of 317 bug reports from 12 bug repositories. The bug reports are thoroughly examined to classify and extract information about the fault's cause (the error) and consequence (the failure and impact). Result: The majority (65\%) of JavaScript faults are DOM-related, meaning they are caused by faulty interactions of the JavaScript
code with the Document Object Model (DOM). Further, 80\% of
the highest impact JavaScript faults are DOM-related. Finally, most JavaScript faults originate from programmer mistakes committed in the JavaScript code itself, as opposed to other web application components such as the server-side or HTML code. Conclusion: Given the prevalence of DOM-related faults, JavaScript programmers need development tools that can help them reason about the DOM. Also, testers should prioritize detection of DOM-related faults as most high impact faults belong to this category. Finally, developers can use the error patterns we found to design more powerful static analysis tools for JavaScript.}
}

@inproceedings{amin:scam13,
        author = {Milani Fard, Amin and Ali Mesbah},
        title = {JSNose: Detecting JavaScript Code Smells},
        booktitle = {Proceedings of the IEEE International Conference on Source Code Analysis and Manipulation (SCAM)},
        publisher = {IEEE Computer Society},
        pages = {10 pages},
        year = {2013},
        url = {http://www.ece.ubc.ca/~amesbah/docs/scam13.pdf},
        abstract = {JavaScript is a powerful and flexible prototype-based scripting language that is increasingly used by developers to create interactive web applications. The language is interpreted, dynamic, weakly-typed, and has first-class functions. In addition, it interacts with other web languages such as CSS and HTML at runtime. All these characteristics make JavaScript code particularly error-prone and challenging to write and maintain. Code smells are patterns in the source code that can adversely influence program comprehension and maintainability of the program in the long term. We propose a set of 13 JavaScript code smells, collected from various developer resources. We present a JavaScript code smell detection technique called JSNose. Our metric-based approach combines static and dynamic analysis to detect smells in client-side code. This automated technique can help developers to spot code that could benefit from refactoring. We evaluate the smell finding capabilities of our technique through an empirical study. By analyzing 11 web applications, we investigate which smells detected by JSNose are more prevalent.}
}

@inproceedings{shabnam:ase13,
	author = {Shabnam Mirshokraie and Ali Mesbah and Karthik Pattabiraman},
	title = {Pythia: Generating Test Cases with Oracles for JavaScript Applications},
	booktitle = {Proceedings of the ACM/IEEE International Conference on Automated Software Engineering (ASE), New Ideas Track}, 
	publisher = {IEEE Computer Society},
	year = {2013},
}

@inproceedings{amin:issre13,
        author = {Milani Fard, Amin and Ali Mesbah},
        title = {Feedback-directed Exploration of Web Applications to Derive Test Models},
        booktitle = {Proceedings of the 24th IEEE International Symposium on Software Reliability Engineering (ISSRE)},
        publisher = {IEEE Computer Society},
        pages = {10 pages},
        year = {2013},
        url = {http://www.ece.ubc.ca/~amesbah/docs/issre13.pdf},
        abstract = {Dynamic exploration techniques play a significant role in automated web application testing and analysis. However,
a general web application crawler that exhaustively explores
the states can become mired in limited specific regions of
the web application, yielding poor functionality coverage. In
this paper, we propose a feedback-directed web application
exploration technique to derive test models. While exploring,
our approach dynamically measures and applies a combination
of code coverage impact, navigational diversity, and structural
diversity, to decide a-priori (1) which state should be expanded,
and (2) which event should be exercised next to maximize the
overall coverage, while minimizing the size of the test model.
Our approach is implemented in a tool called FeedEx. We
have empirically evaluated the efficacy of FeedEx using six web
applications. The results show that our technique is successful in
yielding higher coverage while reducing the size of the test model,
compared to classical exhaustive techniques such as depth-first,
breadth-first, and random exploration.}
}