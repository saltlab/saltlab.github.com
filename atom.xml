<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SALT Lab]]></title>
  <link href="http://saltlab.github.com/atom.xml" rel="self"/>
  <link href="http://saltlab.github.com/"/>
  <updated>2013-05-30T12:01:32-07:00</updated>
  <id>http://saltlab.github.com/</id>
  <author>
    <name><![CDATA[SALT Lab]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[An Empirical Study of Client-Side JavaScript Bugs (ESEM 2013)]]></title>
    <link href="http://saltlab.github.com/blog/2013/05/28/an-empirical-study-of-client-side-javascript-bugs-esem-2013/"/>
    <updated>2013-05-28T11:25:00-07:00</updated>
    <id>http://saltlab.github.com/blog/2013/05/28/an-empirical-study-of-client-side-javascript-bugs-esem-2013</id>
    <content type="html"><![CDATA[<p>Frolin Ocariza, Kartik Bajaj, Karthik Pattabiraman, and Ali Mesbah. <strong>An empirical study of client-side JavaScript bugs</strong>. In <em>Proceedings of the ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)</em>, 10 pages. IEEE Computer Society, 2013.</p>

<blockquote><p>Abstract—Context: Client-side JavaScript is widely used in web applications to improve user-interactivity and minimize clientserver communications. Unfortunately, web applications are prone to JavaScript faults. While prior studies have demonstrated the prevalence of these faults, no attempts have been made to determine their root causes and consequences. Objective: The goal of our study is to understand the root causes and impacts of JavaScript faults and how the results can impact JavaScript programmers, testers and tool developers. Method: We perform an empirical study of 317 bug reports from 12 bug repositories. The bug reports are thoroughly examined to classify and extract information about the fault’s cause (the error) and consequence (the failure and impact). Result: The majority (65%) of JavaScript faults are DOM-related, meaning they are caused by faulty interactions of the JavaScript code with the Document Object Model (DOM). Further, 80% of the highest impact JavaScript faults are DOM-related. Finally, most JavaScript faults originate from programmer mistakes committed in the JavaScript code itself, as opposed to other web application components such as the server-side or HTML code. Conclusion: Given the prevalence of DOM-related faults, JavaScript programmers need development tools that can help them reason about the DOM. Also, testers should prioritize detection of DOM-related faults as most high impact faults belong to this category. Finally, developers can use the error patterns we found to design more powerful static analysis tools for JavaScript.</p></blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Real Challenges in Mobile App Development (ESEM 2013)]]></title>
    <link href="http://saltlab.github.com/blog/2013/05/28/real-challenges-in-mobile-app-development-esem-2013/"/>
    <updated>2013-05-28T11:11:00-07:00</updated>
    <id>http://saltlab.github.com/blog/2013/05/28/real-challenges-in-mobile-app-development-esem-2013</id>
    <content type="html"><![CDATA[<p> Mona Erfani Joorabchi, Ali Mesbah, and Philippe Kruchten. <strong>Real challenges in mobile app development</strong>. In <em>Proceedings of the ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)</em>, 10 pages. IEEE Computer Society, 2013.</p>

<blockquote><p>Abstract—Context: Mobile app development is a relatively new phenomenon that is increasing rapidly due to the ubiquity and popularity of smartphones among end-users. Objective: The goal of our study is to gain an understanding of the main challenges developers face in practice when they build apps for different mobile devices. Method: We conducted a qualitative study, following a Grounded Theory approach, in which we interviewed 12 senior mobile developers from 9 different companies, followed by a semi-structured survey, with 188 respondents from the mobile development community. Results: The outcome is an overview of the current challenges faced by mobile developers in practice, such as developing apps across multiple platforms, lack of robust monitoring, analysis, and testing tools, and emulators that are slow or miss many features of mobile devices. Conclusion: Based on our findings of the current practices and challenges, we highlight areas that require more attention from the research and development community.</p></blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hidden-web induced by client-side scripting: An empirical study (ICWE 2013)]]></title>
    <link href="http://saltlab.github.com/blog/2013/04/30/recent-updates/"/>
    <updated>2013-04-30T13:43:00-07:00</updated>
    <id>http://saltlab.github.com/blog/2013/04/30/recent-updates</id>
    <content type="html"><![CDATA[<p>Zahra Behfarshad and Ali Mesbah. <strong>Hidden-web induced by client-side scripting: An empirical study</strong>. In <em>Proceedings of the International Conference on Web Engineering (ICWE)</em>, 15 pages. Springer, 2013.</p>

<blockquote><p>Abstract: Client-side JavaScript is increasingly used for enhancing web<br/>application functionality, interactivity, and responsiveness. Through the<br/>execution of JavaScript code in browsers, the DOM tree representing a<br/>webpage at runtime, can be incrementally updated without requiring a<br/>URL change. This dynamically updated content is hidden from general<br/>search engines. In this paper, we present the rst empirical study on measuring and characterizing the hidden-web induced as a result of client-side JavaScript execution. Our study reveals that this type of hidden-web<br/>content is prevalent in online web applications today: from the 500 websites we analyzed, 95% contain client-side hidden-web content; On those websites that contain client-side hidden-web content, (1) on average, 62%<br/>of the web states are hidden, (2) per hidden state, there is an average of<br/>19 kilobytes of data that is hidden from which 0.6 kilobytes contain textual content, (3) the DIV element is the most common clickable element<br/>used (61%) to initiate this type of hidden-web state transition, and (4)<br/>on average 25 minutes is required to dynamically crawl 50 DOM states.<br/>Further, our study indicates that there is a correlation between DOM<br/>tree size and hidden-web content, but no correlation exists between the<br/>amount of JavaScript code and client-side hidden-web.</p></blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Efficient JavaScript Mutation Testing (ICST 2013)]]></title>
    <link href="http://saltlab.github.com/blog/2013/01/04/icst13/"/>
    <updated>2013-01-04T17:42:00-08:00</updated>
    <id>http://saltlab.github.com/blog/2013/01/04/icst13</id>
    <content type="html"><![CDATA[<p>Shabnam Mirshokraie, Ali Mesbah, and Karthik Pattabiraman (2013). <strong>Efficient JavaScript Mutation Testing</strong>. In <em>Proceedings of the 6th IEEE International Conference on Software Testing, Verification and Validation, (ICST’13)</em>.</p>

<blockquote><p>Abstract: Mutation testing is an effective test adequacy assessment technique. However, it suffers from two main issues. First, there is a high computational cost in executing the test suite against a potentially large pool of generated mutants. Second, there is much effort involved in filtering out equivalent mutants, which are syntactically different but semantically identical to the original program. Prior work has mainly focused on detecting equivalent mutants after the mutation generation phase, which is computationally expensive and has limited efficiency. In this paper, we propose a technique that leverages static and dynamic program analysis to guide the mutation generation process a-priori towards parts of the code that are error-prone or likely to influence the program’s output. Further, we focus on the JavaScript language, and propose a set of mutation operators that are specific to web applications. We implement our approach in a tool called Mutandis. We empirically evaluate Mutandis on a number of web applications to assess the efficacy of the approach.</p></blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress]]></title>
    <link href="http://saltlab.github.com/blog/2013/01/02/Octopress/"/>
    <updated>2013-01-02T06:29:00-08:00</updated>
    <id>http://saltlab.github.com/blog/2013/01/02/Octopress</id>
    <content type="html"><![CDATA[<p>SALT lab&rsquo;s website is migrated to GitHub and is now based on Octopress!</p>
]]></content>
  </entry>
  
</feed>
